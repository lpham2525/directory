{"version":3,"sources":["components/Employee/Employee.js","components/Form/Form.js","components/Jumbotron/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["Employee","props","console","log","employees","map","employee","className","style","maxWidth","key","id","first_name","last_name","email","Job_Title","Form","type","placeholder","aria-label","name","value","inputValue","onChange","handleInputChange","onClick","handleFirst","handleSearch","Jumbotron","App","state","category","firstName","handleJobTitle","sort","a","b","master","padawan","setState","handleSort","nameA","nameB","event","target","preventDefault","found","filter","toLowerCase","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b244bfbb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Employee = props => {\r\n  console.log('employees props = ', props)\r\n    // < div class=\"card text-white bg-secondary mb-3\" style = \"max-width: 18rem;\" >\r\n    //   <div class=\"card-header\">Header</div>\r\n    //   <div class=\"card-body\">\r\n    //     <h5 class=\"card-title\">Secondary card title</h5>\r\n    //     <p class=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p>\r\n    //   </div>\r\n  return (\r\n    <ul>\r\n      {props.employees.map(employee =>\r\n        <>\r\n          <div className='card text-white bg-info mb-3' style={{ maxWidth: '18rem' }} key={employee.id}>\r\n            <div className='card-header'>{employee.first_name} {employee.last_name}\r\n            </div>\r\n            <div className='card-body'>\r\n              <p className='card-text'>\r\n                {employee.email}\r\n                <br />\r\n                Rank: {employee.Job_Title}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )\r\n    }\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Employee\r\n","import React from 'react'\r\n\r\nconst Form = props => {\r\n  console.log('form=', props)\r\n  return (\r\n    <form className=\"form-inline my-2 my-lg-0\">\r\n      <p>\r\n        <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" name=\"inputValue\" value={props.inputValue} onChange={props.handleInputChange} />\r\n      </p>\r\n      <p>\r\n        <button className=\"btn btn-warning my-2 my-sm-0\" type=\"submit\" onClick={props.handleFirst}>Search by First Name</button>\r\n      </p>\r\n      <p>\r\n        <button className=\"btn btn-dark my-2 my-sm-0\" type=\"submit\" onClick={props.handleSearch}>Search by Last Name</button>\r\n      </p>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\n\r\nconst Jumbotron = () => {\r\n  return (\r\n    <div className=\"jumbotron\">\r\n      <div className=\"container\">\r\n        <h1 className=\"display-4\">Rebel Alliance Directory</h1>\r\n        <p className=\"lead\">A convenient directory for finding basic information about the Rebel Alliance.</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Jumbotron\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport Employee from './components/Employee'\nimport Form from './components/Form'\nimport Jumbotron from './components/Jumbotron'\nlet employees = [{\n  id: 1,\n  first_name: 'Barnaby',\n  last_name: 'Seabright',\n  email: 'bseabright0@cnet.com',\n  Job_Title: 'Jedi Master'\n}, {\n  id: 2,\n  first_name: 'Marlene',\n  last_name: 'Margrie',\n  email: 'mmargrie1@admin.ch',\n  Job_Title: 'Jedi Master'\n}, {\n  id: 3,\n  first_name: 'Jeffie',\n  last_name: 'Auletta',\n  email: 'jauletta2@cloudflare.com',\n  Job_Title: 'Padawan'\n}, {\n  id: 4,\n  first_name: 'Jaimie',\n  last_name: 'Quilty',\n  email: 'jquilty3@rambler.ru',\n  Job_Title: 'Jedi Master'\n}, {\n  id: 5,\n  first_name: 'Elysia',\n  last_name: 'Denniss',\n  email: 'edenniss4@earthlink.net',\n  Job_Title: 'Padawan'\n}, {\n  id: 6,\n  first_name: 'Pauletta',\n  last_name: 'Grelak',\n  email: 'pgrelak5@issuu.com',\n  Job_Title: 'Jedi Master'\n}, {\n  id: 7,\n  first_name: 'Irving',\n  last_name: 'Node',\n  email: 'inode6@techcrunch.com',\n  Job_Title: 'Padawan'\n}, {\n  id: 8,\n  first_name: 'Paige',\n  last_name: 'Deroche',\n  email: 'pderoche7@time.com',\n  Job_Title: 'Padawan'\n}, {\n  id: 9,\n  first_name: 'Candis',\n  last_name: 'Cadogan',\n  email: 'ccadogan8@bbb.org',\n  Job_Title: 'Padawan'\n}, {\n  id: 10,\n  first_name: 'Karalee',\n  last_name: 'Tregidga',\n  email: 'ktregidga9@nifty.com',\n  Job_Title: 'Jedi Master'\n}]\n\nclass App extends Component {\n\n  state = {\n    employees: employees,\n    inputValue: '',\n    category: 'last_name',\n    firstName: 'first_name'\n  }\n\n  handleJobTitle = () => {\n    let employees = this.state.employees\n    employees.sort((a, b) => {\n      let master = a.Job_Title\n      let padawan = b.Job_Title\n      if (master < padawan) {\n        return -1\n      }\n      if (master > padawan) {\n        return 1\n      }\n      return 0\n    })\n    // console.log(employees)\n    this.setState({\n      employees\n    })\n  }\n\n  handleSort = () => {\n    let employees = this.state.employees\n    employees.sort((a, b) => {\n      let nameA = a.last_name\n      let nameB = b.last_name\n      if (nameA < nameB) {\n        return -1\n      }\n      if (nameA > nameB) {\n        return 1\n      }\n      return 0\n    })\n    this.setState({\n      employees\n    })\n  }\n\n  handleInputChange = event => {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  handleSearch = event => {\n    event.preventDefault()\n    console.log(event.target.value)\n    let found = employees.filter((employee) => {\n      return employee[this.state.category].toLowerCase() === this.state.inputValue.toLowerCase()\n    })\n    this.setState({\n      employees: found, inputValue: ''\n    })\n  }\n\n  handleFirst = event => {\n    event.preventDefault()\n    console.log(event.target.value)\n    let found = employees.filter((employee) => {\n      return employee.first_name.toLowerCase() === this.state.inputValue.toLowerCase()\n    })\n    this.setState({\n      employees: found, inputValue: ''\n    })\n  }\n\n  // handleReset = () => {\n  //   let reset =\n  //     this.setState({\n  //       this.state.employees\n  //     })\n  // }\n\n  render() {\n    return (\n\n      <div className='container'>\n        <div className='row'>\n          <Jumbotron />\n        </div>\n        <div className='row'>\n          <div className='col'>\n            <p>\n              <button onClick={this.handleSort} className=\"btn btn-primary\">Sort by last name</button>\n            </p>\n            <p>\n              <button onClick={this.handleJobTitle} className=\"btn btn-success\">Sort by rank</button>\n            </p>\n            <Form\n              inputValue={this.state.inputValue}\n              handleInputChange={this.handleInputChange}\n              handleSearch={this.handleSearch}\n              handleFirst={this.handleFirst} />\n            <Employee employees={this.state.employees} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}