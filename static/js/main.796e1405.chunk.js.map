{"version":3,"sources":["components/Employee/Employee.js","components/Form/Form.js","components/Jumbotron/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["Employee","props","console","log","className","scope","employees","map","employee","id","first_name","last_name","email","Job_Title","home_world","Form","type","placeholder","aria-label","name","value","inputValue","onChange","handleInputChange","onClick","handleFirst","handleSearch","Jumbotron","App","state","category","firstName","handleSortByJob","sort","a","b","master","padawan","setState","handleSortFirstName","nameA","nameB","handleSortLastName","event","target","preventDefault","found","filter","toLowerCase","handleReset","reset","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.796e1405.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Employee = props => {\r\n  console.log('employees props = ', props)\r\n  return (\r\n      <table className=\"table table-dark table-striped table-hover\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">First Name</th>\r\n            <th scope=\"col\">Last Name</th>\r\n            <th scope=\"col\">Email</th>\r\n            <th scope=\"col\">Class</th>\r\n            <th scope=\"col\">Home World</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.employees.map(employee =>\r\n            <tr>\r\n              <td>{employee.id}</td>\r\n              <td>{employee.first_name}</td>\r\n              <td>{employee.last_name}</td>\r\n              <td>{employee.email}</td>\r\n              <td>{employee.Job_Title}</td>\r\n              <td>{employee.home_world}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n  )\r\n}\r\n\r\nexport default Employee\r\n","import React from 'react'\r\n\r\nconst Form = props => {\r\n  console.log('form=', props)\r\n  return (\r\n    <form className=\"form-inline my-2 my-lg-0\">\r\n      <p>\r\n        <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" name=\"inputValue\" value={props.inputValue} onChange={props.handleInputChange} />\r\n      </p>\r\n      <p>\r\n        <button className=\"btn btn-warning my-2 my-sm-0\" type=\"submit\" onClick={props.handleFirst}>Search by First Name</button>\r\n      </p>\r\n      <p>\r\n        <button className=\"btn btn-dark my-2 my-sm-0\" type=\"submit\" onClick={props.handleSearch}>Search by Last Name</button>\r\n      </p>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\n\r\nconst Jumbotron = () => {\r\n  return (\r\n    <div className=\"jumbotron\">\r\n      <div className=\"container\">\r\n        <h1 className=\"display-4\">Rebel Alliance Directory</h1>\r\n        <p className=\"lead\">A directory of information about the members of the Resistance.</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Jumbotron\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport Employee from './components/Employee'\nimport Form from './components/Form'\nimport Jumbotron from './components/Jumbotron'\n\nlet employees = [\n{\n  id: 1,\n  first_name: 'R2-D2',\n  last_name: 'Droid',\n  email: 'r2d2@astromech.com',\n  Job_Title: 'Rebel Droid',\n  home_world: 'Naboo'\n},\n{\n  id: 2,\n  first_name: 'C-3PO',\n  last_name: 'Droid',\n  email: 'c3po@protocol.com',\n  Job_Title: 'Rebel Droid',\n  home_world: 'Tatooine',\n},\n{\nid: 3,\nfirst_name: 'Luke',\nlast_name: 'Skywalker',\nemail: 'luke.skywalker@tatooine.com',\nJob_Title: 'Padawan',\nhome_world: 'Tatooine'\n}, \n{\n  id: 4,\n  first_name: 'Leia',\n  last_name: 'Organa',\n  email: 'leia.organa@alderaan.com',\n  Job_Title: 'Padawan',\n  home_world: 'Alderaan'\n},\n{\n  id: 5,\n  first_name: 'Han',\n  last_name: 'Solo',\n  email: 'han.solo@corellia.com',\n  Job_Title: 'Smuggler',\n  home_world: 'Corellia'\n},\n{\n  id: 6,\n  first_name: 'Chewbacca',\n  last_name: 'Wookie',\n  email: 'chewbacca@kashyyyk.com',\n  Job_Title: 'Smuggler',\n  home_world: \"Kashyyyk\",\n},\n{\n  id: 7,\n  first_name: 'Anakin',\n  last_name: 'Skywalker',\n  email: 'anakin.skywalker@podracer.com',\n  Job_Title: 'Padawan',\n  home_world: 'Dagobah'\n},\n{\n  id: 8,\n  first_name: 'Baby',\n  last_name: 'Yoda',\n  email: 'emailwhatis@grandmaster.com',\n  Job_Title: 'Jedi Master',\n  home_world: 'unknown'\n}, \n{\n  id: 9,\n  first_name: 'Obi-Wan',\n  last_name: 'Kenobi',\n  email: 'ben.kenobi@stewjon.com',\n  Job_Title: 'Jedi Master',\n  home_world: 'Stewjon'\n}, \n{\n  id: 10,\n  first_name: 'Lando',\n  last_name: 'Calrissian',\n  email: 'lando.calrissian@socorro.com',\n  Job_Title: 'Smuggler',\n  home_world: 'Socorro'\n}]\n\nclass App extends Component {\n\n  state = {\n    employees: employees,\n    inputValue: '',\n    category: 'last_name',\n    firstName: 'first_name'\n  }\n\n  handleSortByJob = () => {\n    let employees = this.state.employees\n    employees.sort((a, b) => {\n      let master = a.Job_Title\n      let padawan = b.Job_Title\n      if (master < padawan) {\n        return -1\n      }\n      if (master > padawan) {\n        return 1\n      }\n      return 0\n    })\n    this.setState({\n      employees\n    })\n  }\n\n  handleSortFirstName = () => {\n    let employees = this.state.employees\n    employees.sort((a, b) => {\n      let nameA = a.first_name\n      let nameB = b.first_name\n      if (nameA < nameB) {\n        return -1\n      }\n      if (nameA > nameB) {\n        return 1\n      }\n      return 0\n    })\n    this.setState({\n      employees\n    })\n  }\n\n  handleSortLastName = () => {\n    let employees = this.state.employees\n    employees.sort((a, b) => {\n      let nameA = a.last_name\n      let nameB = b.last_name\n      if (nameA < nameB) {\n        return -1\n      }\n      if (nameA > nameB) {\n        return 1\n      }\n      return 0\n    })\n    this.setState({\n      employees\n    })\n  }\n\n  handleInputChange = event => {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  handleSearch = event => {\n    event.preventDefault()\n    console.log(event.target.value)\n    let found = employees.filter((employee) => {\n      return employee[this.state.category].toLowerCase() === this.state.inputValue.toLowerCase()\n    })\n    this.setState({\n      employees: found, inputValue: ''\n    })\n  }\n\n  handleFirst = event => {\n    event.preventDefault()\n    console.log(event.target.value)\n    let found = employees.filter((employee) => {\n      return employee.first_name.toLowerCase() === this.state.inputValue.toLowerCase()\n    })\n    this.setState({\n      employees: found, inputValue: ''\n    })\n  }\n\n  handleReset = () => {\n    let reset = employees.sort((a, b) => {\n      return a.id - b.id\n    })\n    this.setState({\n      employees: reset, inputValue: ''\n    })\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <div className='row'>\n          <Jumbotron />\n        </div>\n        <div className='row'>\n          <div className='col'>\n            <Form\n              inputValue={this.state.inputValue}\n              handleInputChange={this.handleInputChange}\n              handleSearch={this.handleSearch}\n              handleFirst={this.handleFirst} />\n            <p>\n              <button onClick={this.handleSortFirstName} className=\"btn btn-primary\">Sort by first name</button>\n\n              <button onClick={this.handleSortLastName} className=\"btn btn-success\">Sort by last name</button>\n\n              <button onClick={this.handleSortByJob} className=\"btn btn-secondary\">Sort by class</button>\n\n              <button onClick={this.handleReset} className=\"btn btn-danger\">Reset list</button>\n            </p>\n            <Employee employees={this.state.employees} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}